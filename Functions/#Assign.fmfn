/**
 * =====================================
 * #Assign ( parameters )
 *
 * PURPOSE:
 * 		#Assign ( parameters ) uses the output of the # ( name ; value ) function (or
 * 		the concatenated results from several #() calls) to declare and populate a
 * 		series of locally-scoped script variables.
 *
 * RETURNS:
 * 		True (1) when parameters is a valid set of name-value pairs (which includes
 * 		the empty string); False (0) otherwise.
 *
 * PARAMETERS:
 * 		parameters: The (potentially Null) string of name-value pairs to parse into
 * 		variables.
 *
 * EXAMPLES:
 * 		#Assign (  # ( "name1"; "value1" ) ) //= True, and sets the variable $name1 with value "value1"
 * 		#Assign ( Null ) //= True, and sets no variables
 * 		#Assign ( "This is not a valid name-value pair string" ) //= False
 *
 * DEPENDENCIES: none
 *
 * NOTE:
 * 		To be accessible outside this function, variable declarations in parameters
 * 		must use the $- or $$-prefixed notation for FileMaker variables. This
 * 		function does not handle that for you.
 *
 * HISTORY:
 * 		MODIFIED on 2011-03-19 by perrens@gmail.com to respect default trailing ¶
 * 		of # ( name; value ) function when checking to append $~.
 * 		MODIFIED on 2011-03-03 by matt@filemakermagazine.com to not use $void and
 * 		only include trailing $~ if parameters is non conforming to Let()
 * 		MODIFIED on 2010-10-04 by jeremy@kyologic.com to return explicit True or
 * 		False values indicating successful evaluation of the script result, and to
 * 		fit syntax inspired by a comment on standards.filemakermagazine.com by
 * 		Richard Dyce.
 * 		CREATED on 2010-03-13 by Jeremy Bante of Kyo Logic (jeremy@kyologic.com).
 * 		INSPIRED by an example in the FileMaker help documentation.
 *
 * REFERENCES:
 * 		Script Parameter Interface Best Practice: http://filemakerstandards.org/pages/viewpage.action?pageId=557462
 * =====================================
 */
 
Let (
	~evaluateString =
		"Let( [¶"
		& parameters
		& If ( Right ( parameters; 1 ) = ";" or ( Right ( parameters; 2 ) = ";¶" ); "$~ = $~")  //terminating variable to keep semicolon-delimited sytax in variableString consistent
		& "¶];¶"
		& "True¶)";

	//end variable definitions

	If ( IsValidExpression ( ~evaluateString );
			Evaluate ( ~evaluateString );
		//else, ~evaluateString is not a valid expression...
		False
	)
)